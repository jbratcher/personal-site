{
  "date": "2020-06-15T13:16:13.364Z",
  "body": "Last time, we set up a way for registered users to verify their accounts via email. This post will cover the related functionality that allows a user to reset their password via a 'forgot password' request.\n\n[Previous Post](https://www.jeremybratcher.com/blog/2020-06-04-user-auth-with-adonis-and-nuxt-part-2)\n\nThe workflow will be similar to the registration of a new user in that they will be sent an email with a link to reset their password.\n\nTo start we will create a page in the `users` folder named `forgot-password.vue`.\n\n`pages/users/forgot-password.vue`\n\n```html\n<template>\n  <v-container>\n    <v-row>\n      <v-col class=\"d-flex flex-column mx-auto col-8 col-md-5 py-12\">\n        <!-- Forgot Password Form -->\n        <v-card class=\"pa-6\" elevation=\"6\">\n          <v-card-title\n            :class=\"{\n              'headline mb-6': $breakpoint.mdAndUp,\n              'title mb-4': $breakpoint.smAndDown\n            }\"\n          >\n            Reset Your Password\n          </v-card-title>\n\n          <v-card-subtitle :class=\"$breakpoint.mdAndUp ? 'mb-6' : 'mb-4'\">\n            Enter your email and we will send you a password reset link\n          </v-card-subtitle>\n\n          <v-card-text class=\"pb-0\">\n            <v-form v-model=\"valid\">\n              <v-text-field\n                v-model=\"email\"\n                label=\"Email\"\n                :rules=\"emailRules\"\n                outlined\n              />\n            </v-form>\n          </v-card-text>\n\n          <v-card-actions class=\"pt-0 px-4\">\n            <v-btn @click=\"reset\" dark width=\"fit-content\">\n              <v-icon class=\"mr-3\">{{ forgotIcon }}</v-icon>Send link\n            </v-btn>\n          </v-card-actions>\n        </v-card>\n        <v-alert :value=\"Boolean(error)\" type=\"error\">{{ error }}</v-alert>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n```\n\n```html\n<script>\n  import { mapState, mapMutations, mapActions } from \"vuex\";\n  import { mdiLockQuestion } from \"@mdi/js\";\n  import formRulesMixin from \"../../mixins/formRulesMixin\";\n  export default {\n    mixins: [formRulesMixin],\n    data: () => ({\n      forgotIcon: mdiLockQuestion,\n      email: \"\",\n      error: null,\n      valid: true,\n    }),\n    methods: {\n      ...mapActions([\"forgotPasswordLink\"]),\n      async reset() {\n        this.forgotPasswordLink(this.email);\n        this.$toast\n          .info(`A password reset link has been emailed to you`)\n          .goAway(3000);\n      },\n    },\n  };\n</script>\n```\n\nThis page will have an input for the user's email and a button to request a forgot password email.\n\nOnce the user enters their email and clicks the submit button, the request is sent to the User controller with the email coded as the `uid` in the URL.\n\nIn the User controller `Persona.forgotPassword()` is called passing the email as the `uid`. This method does several things as outlined in the [Adonis Persona documentation](https://github.com/adonisjs/adonis-persona#forgotpassworduid)\n\n* Finds a user with the matching uid.\n* Generates a password change token.\n* Emits the forgot::password event. You can listen for this event to send an email with the token to reset the password.\n\n`App/Controllers/UserController.js`\n\n```javascript\nclass UserController {\n  // send forgot password email with token link\n  async forgotPassword({ request }) {\n    return await Persona.forgotPassword(request.input(\"uid\"));\n  }\n}\n```\n\nPersona is doing the heavy lifting here in verifying that the user exists in the `users` table, creating a token to verify the password change request, and firing an even which we will use to send the email to the user.\n\n## Email Template\n\nThe email should provide basic information about the request and a link to the password reset page that contains the password reset token.\n\n`resources/views/forgot/password.edge`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Password Reset Request</title>\n  </head>\n  <body>\n    <section>\n      <p>Password Reset Request</p>\n      <p>\n        Hi, {{ user.full_name }}.\n      </p>\n      <p>\n        This email was sent because you requested a password reset. Please\n        follow the link below to reset your password.\n      </p>\n      <a href=\"http://localhost:3000/users/password-reset?{{token}}\"\n        >Reset Your Password</a\n      >\n    </section>\n  </body>\n</html>\n```\n\n## Forgot Password Event\n\nThe triggered event should use the mail provider to send the filled in email template to the user.\n\n`start/events.js`\n\n```javascript\n// on forgot password, send email reset link\nEvent.on(\"forgot::password\", async (payload) => {\n  const user = payload.user.toJSON();\n  const token = querystring.encode({\n    token: payload.token,\n  });\n\n  await Mail.send(\"forgot.password\", { user, token }, (message) => {\n    message\n      .to(payload.user.email)\n      .from(`<${Env.get(\"MAIL_USERNAME\")}>`)\n      .subject(\"Password Reset Request\");\n  });\n});\n```\n\nThis event is basically the same as the event we use to send a newly registered user their account verification email except we are targeting the `forgot::password` event.\n\nOnce the user receives the email and clicks the link, it will redirect them to the password reset page using the token as verification. The user is asked to enter a new password, confirm it, and finally click the submit button to update their password.\n\n`pages/users/password-reset/_token.vue`\n\n```html\n<template>\n  <!-- update password -->\n  <v-container class=\"pa-0\">\n    <v-row>\n      <v-col class=\"d-flex flex-column mx-auto col-8 col-md-5 py-12\">\n        <!-- Forgot Password Form -->\n        <v-card class=\"pa-6\" elevation=\"6\">\n          <v-card-title\n            :class=\"{\n              'headline mb-6': $breakpoint.mdAndUp,\n              'title mb-4': $breakpoint.smAndDown\n            }\"\n          >\n            Change Your Password\n          </v-card-title>\n\n          <v-card-subtitle :class=\"$breakpoint.mdAndUp ? 'mb-6' : 'mb-4'\">\n            Enter your new password\n          </v-card-subtitle>\n\n          <v-card-text class=\"pb-0\">\n            <v-form v-model=\"valid\">\n              <v-text-field\n                v-model=\"updatePassword.password\"\n                outlined\n                placeholder=\"New Password\"\n                :rules=\"shortTextRules\"\n                type=\"password\"\n                autocomplete=\"new-password\"\n              />\n\n              <v-text-field\n                v-model=\"updatePassword.password_confirmation\"\n                outlined\n                placeholder=\"New Password\"\n                :rules=\"shortTextRules\"\n                type=\"password\"\n              />\n            </v-form>\n          </v-card-text>\n\n          <v-card-actions class=\"pt-0 px-4\">\n            <v-btn\n              @click=\"updatePasswordByTokenClient\"\n              dark\n              width=\"fit-content\"\n            >\n              <v-icon class=\"mr-3\">{{ keyIcon }}</v-icon>Change Password\n            </v-btn>\n          </v-card-actions>\n        </v-card>\n        <v-alert :value=\"Boolean(error)\" type=\"error\">{{ error }}</v-alert>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n```\n\n```html\n<script>\n  import { mapState, mapMutations, mapActions } from \"vuex\";\n  import { mdiAccountKey } from \"@mdi/js\";\n  import formRulesMixin from \"../../../mixins/formRulesMixin\";\n  export default {\n    mixins: [formRulesMixin],\n    data: () => ({\n      error: null,\n      keyIcon: mdiAccountKey,\n      updatePassword: {\n        password: \"\",\n        password_confirmation: \"\",\n      },\n      valid: true,\n    }),\n    methods: {\n      ...mapActions([\"updateUserPasswordByToken\"]),\n      updatePasswordByTokenClient() {\n        this.updateUserPasswordByToken({\n          updatePassword: this.updatePassword,\n          token: Object.values(this.$route.query)[0],\n        });\n      },\n    },\n  };\n</script>\n```\n\nThe `password` and `password-confirmation` fields as well as the token are sent to the User controller where Persona.updatePasswordByToken() is called.\n\nPersona.updatedPasswordByToken() does a few things:\n\n* Makes sure the token is valid and not expired.\n* Ensures the password is confirmed.\n* Updates the user's password.\n\nNext time, we will wrap up the user module by allowing the user to edit their profile, update their email, and update their password as a logged in user.",
  "thumbnail": "/img/adonis-nuxt-starter.svg",
  "hero": "/img/adonis-nuxt-starter.svg",
  "title": "User Auth with Adonis and Nuxt, Part 3",
  "description": "Forgot Password / Password Reset"
}